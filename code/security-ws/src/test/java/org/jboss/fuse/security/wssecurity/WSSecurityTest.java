package org.jboss.fuse.security.wssecurity;

import org.apache.cxf.endpoint.Client;
import org.apache.cxf.endpoint.Server;
import org.apache.cxf.frontend.ClientProxy;
import org.apache.cxf.interceptor.LoggingInInterceptor;
import org.apache.cxf.interceptor.LoggingOutInterceptor;
import org.apache.cxf.jaxws.JaxWsProxyFactoryBean;
import org.apache.cxf.jaxws.JaxWsServerFactoryBean;
import org.apache.cxf.service.Service;
import org.apache.cxf.transport.local.LocalTransportFactory;
import org.apache.cxf.ws.security.wss4j.WSS4JInInterceptor;
import org.apache.cxf.ws.security.wss4j.WSS4JOutInterceptor;
import org.apache.wss4j.dom.WSConstants;
import org.apache.wss4j.dom.handler.WSHandlerConstants;

import org.apache.wss4j.stax.ext.WSSConstants;
import org.jboss.fuse.security.AbstractSecurityTest;
import org.jboss.fuse.security.service.Echo;
import org.jboss.fuse.security.service.EchoImpl;
import org.jboss.fuse.security.service.PwdCallback;
import org.junit.Before;
import org.junit.Test;

import static org.junit.Assert.assertEquals;

public class WSSecurityTest extends AbstractSecurityTest {

    protected WSS4JInInterceptor wsIn;
    protected WSS4JOutInterceptor wsOut;
    private Echo echo;
    private Client client;
    private JaxWsServerFactoryBean factory;

    public void setUpWSEndpoint(String PORT) {
    }

    public void setupClient() {
    }

    @Before
    public void setUpService() throws Exception {
        // Create the Web Service endpoint exposing the Echo Service locally without HTTP Transport
        setUpWSEndpoint(null);

        // Create the client
        setupClient();
    }

    /**
     * Issue a SOAP Message where the SOAP Header generated by the WSS4J Interceptor of the client will include a SOAP WSSE header section with a username and a timestamp to authenticate the JAXWS Client
     * request. This use case should issue a user with a wrong password and the test must validate that it fails with the message "Security processing failed."
     */
    @Test
    public void testUsernameTokenWrongPassword() throws Exception {
    }

    /**
     * Issue a SOAP Message where the SOAP Header generated by the WSS4J Interceptor of the client will include a SOAP WSSE header section with a username and a timestamp to authenticate the JAXWS Client
     * request. This use case should issue a user with a correct password retrieved from the PwdCallback class. The must validate that when we call the Echo service with the message "test", we get as response "test
     */
    @Test public void testUsernameToken() throws Exception {
    }

    /**
     * Issue a SOAP Message where the SOAP Header includes a WSSE section to sign the message generated by the JAXWS Client
     * The Algorithm to be used to sign the body of the message is SHA256 while the Digest Algo should be RSA SHA1
     * The parts to be signed are the Body and the TimeStamp.
     */
    @Test public void testSignature() throws Exception {
    }

    /**
     * Issue a SOAP Message where the SOAP Header includes a WSSE section to sign and encrypt the message generated by the JAXWS Client
     */
    @Test public void testEncryptionPlusSig() throws Exception {
    }

}
